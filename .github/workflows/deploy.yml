# .github/workflows/deploy.yml

name: Deploy to Oracle Cloud

# 이 워크플로우가 언제 실행될지 정의합니다.
# main 브랜치에 push 이벤트가 발생했을 때 실행됩니다.
on:
  push:
    branches: [ master ]

# 실행될 작업들을 정의합니다.
jobs:
  deploy:
    # 이 작업이 실행될 가상 환경을 지정합니다.
    runs-on: ubuntu-latest

    # 실행될 단계들을 순서대로 정의합니다.
    steps:
    # 1. 먼저, GitHub 저장소의 코드를 가상 환경으로 가져옵니다(checkout).
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. SSH를 통해 원격 서버에 접속하여 배포 스크립트를 실행합니다.
    - name: Deploy to Server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.OCI_SSH_HOST }}
        username: ${{ secrets.OCI_SSH_USER }}
        key: ${{ secrets.OCI_SSH_PRIVATE_KEY }}
        # 💡💡💡 바로 이 script 부분을 아래의 최종 버전으로 교체합니다 💡💡💡
        script: |
          # 1. 먼저, 프로젝트 폴더로 이동합니다.
          cd ~/memora  # ‼️ 실제 프로젝트 폴더 경로로 수정하세요!

          # 2. git pull로 최신 코드를 가져옵니다.
          git pull origin master

          # 💡 이제 모든 것은 docker compose가 알아서 합니다!
          # --build: 코드가 바뀌었으니 이미지를 새로 만듭니다.
          # -d: 백그라운드에서 실행합니다.
          docker compose up --build -d

          # 3. ‼️ 여기가 핵심! nvm을 수동으로 로드합니다.
         # export NVM_DIR="$HOME/.nvm"
         # [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

          # 4. ‼️ 여기가 핵심! .env 파일을 읽어서 환경 변수를 설정합니다.
          #    이제 npm, knex, pm2 모두 DB 정보를 알게 됩니다.
         # set -a
         # source .env
         # set +a

          # 5. npm으로 패키지를 설치합니다.
         # npm install --production

          # 6. knex로 DB 마이그레이션을 실행합니다.
         # npx knex migrate:latest

          # 7. ‼️ 여기가 핵심! pm2로 앱을 '재시작 또는 새로 시작'합니다.
          #    'reload' 대신 'startOrRestart'를 사용하여, 앱이 꺼져있으면 새로 시작하고,
          #    켜져 있으면 재시작하도록 만듭니다. 'my-app'은 package.json의 name과 일치시키는 것이 좋습니다.
         # pm2 startOrRestart ecosystem.config.js --env production